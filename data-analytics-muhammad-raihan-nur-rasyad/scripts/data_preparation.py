# -*- coding: utf-8 -*-
"""data_preparation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-nXbSj1xe7y01kzkByuhCQyTRyR7JnqG
"""

import json
import pandas as pd

"""#Data Cleaning

### Extract and clean `books.json` data
"""

#import file books.json
with open('books.json', 'r') as file:
    data = json.load(file)

#konversi ke dataframe pandas
df = pd.json_normalize(data['books'])
dfn = pd.DataFrame(df)
dfn

#drop kolom cover dan status
dfn2 = dfn.drop(['cover', 'status'], axis=1)

dfn2

#cek missing value
pd.isna(dfn2).sum()

#cek duplikat
dfn2.duplicated().sum()

#merubah genre dan status menjadi data category
text_cols = ["title", "author"]
dfn2[text_cols] = dfn2[text_cols].astype("string")

#merubah genre menjadi data category
dfn2["genre"] = dfn2["genre"].astype("category")

#cek tipe data
dfn2.info()

#simpan cleaned data kedalam file csv
dfn2.to_csv("books_clean.csv", index=False)

"""### Create sample user interaction data and generate reading progress data"""

import random
from datetime import datetime, timedelta

random.seed(5) #fixed random
users = range(0, 200)
df2 = []

for user in users:
   user = random.randint(1, 100) #random user
   book_id = random.randint(1, 8) #random book
   action = random.choice(["view", "search", "rate"]) #random action
   random_month = random.randint(1, 12) #random month
   timestamp = datetime(2025, random_month, 15, 10, 30) + timedelta(days=random.randint(0, 30), hours=random.randint(0, 23), minutes=random.randint(0, 59)) #random timestamp
   total_pages = dfn.loc[dfn["id"] == book_id, "pages"].values[0] #mengambil total buku
   pages_read = random.randint(1, total_pages) #random halaman buku yang sudah dibaca
   completion_rate = round(pages_read / total_pages, 2) #hitung completion rate
   df2.append({
            "user_id": user,
            "book_id": book_id,
            "action": action,
            "timestamp": timestamp.isoformat(),
            "pages_read": pages_read,
            "total_pages": total_pages,
            "completion_rate": completion_rate
        })
user_df = pd.DataFrame(df2)
user_df

selected_columns = ['user_id', 'book_id', 'action', 'timestamp']
user_interaction_df = user_df[selected_columns]
user_interaction_df

user_interaction_df.to_csv("user_interaction.csv", index=False)

selected_columns2 = ['user_id', 'book_id', 'pages_read', 'total_pages',	'completion_rate']
progress_df = user_df[selected_columns2]
progress_df

progress_df.to_csv("reading_progress.csv", index=False)

"""# Data Transformation

### Total books read by users
"""

#melihat total buku yang dibaca oleh masing2 pengguna
user_metrics = user_df.groupby("user_id").agg(
    avg_completion=("completion_rate", "mean"),
    total_books=("book_id", "nunique")
).reset_index()

user_metrics

"""### User segment"""

#melihat segementasi pembaca berdasarkan tiga kategori
user_df["segment"] = pd.cut(
    user_df["completion_rate"],
    bins=[-1, 0.3, 0.7, 1],
    labels=["Low Reader", "Moderate Reader", "High Reader"]
)
user_df